{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/Header.js","components/AddTodo.js","components/pages/About.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","textDecoration","props","todo","completed","background","padding","paddingRight","borderBottom","this","id","title","style","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","color","border","borderRadius","cursor","float","Todos","console","log","todos","map","key","React","headerStyle","textAlign","linkStyle","Header","to","AddTodo","state","onSubmit","e","preventDefault","addTodo","setState","target","name","value","display","placeholder","flex","className","About","Fragment","App","axios","delete","then","res","filter","newTodo","uuid","v4","get","data","path","exact","render","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.06f5251b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport class TodoItem extends Component {\n  getStyle = () => {\n    return {\n      textDecoration: this.props.todo.completed ? \"line-through\" : \"none\",\n      background: \"#f4f4f4\",\n      padding: \" 10px\",\n      paddingRight: \"20px\",\n      borderBottom: \"1px #ccc dotted\"\n    };\n  };\n\n  /*   markComplete = e => {\n    console.log(this.props);\n  }; */\n  render() {\n    const { id, title } = this.props.todo;\n    return (\n      <div style={this.getStyle()}>\n        <p>\n          <input\n            type=\"checkbox\"\n            onChange={this.props.markComplete.bind(this, id)}\n          />{\" \"}\n          {title}{\" \"}\n          <button style={btnStyle} onClick={this.props.delTodo.bind(this, id)}>\n            x\n          </button>\n        </p>\n      </div>\n    );\n  }\n}\n\nconst btnStyle = {\n  background: \"#ff0000\",\n  color: \"#fff\",\n  border: \"none\",\n  padding: \"5px 10px\",\n  borderRadius: \"50%\",\n  cursor: \"pointer\",\n  float: \"right\"\n};\n\n// PropTypes\n/* Todos.propTypes = {\n  todos: PropTypes.array.isRequired,\n  markComplete: PropTypes.func.isRequired,\n  delTodo: PropTypes.func.isRequired\n}; */\n\nexport default TodoItem;\n","import React from \"react\";\nimport TodoItem from \"./TodoItem\";\n\nclass Todos extends React.Component {\n  render() {\n    console.log(this.props.todos);\n    return this.props.todos.map(todo => (\n      <TodoItem\n        key={todo.id}\n        todo={todo}\n        markComplete={this.props.markComplete}\n        delTodo={this.props.delTodo}\n      />\n    ));\n  }\n}\n\n// PropTypes\n/* Todos.propTypes = {\n  todos: PropTypes.array.isRequired,\n  markComplete: PropTypes.func.isRequired,\n  delTodo: PropTypes.func.isRequired\n}; */\nexport default Todos;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Header() {\n  return (\n    <header style={headerStyle}>\n      <h1>TodoList</h1>\n      <Link style={linkStyle} to=\"/\">\n        Home\n      </Link>{\" \"}\n      |{\" \"}\n      <Link style={linkStyle} to=\"/about\">\n        About\n      </Link>\n    </header>\n  );\n}\n\nconst headerStyle = {\n  background: \"#333\",\n  color: \"#fff\",\n  textAlign: \"center\",\n  padding: \"10px\"\n};\n\nconst linkStyle = {\n  color: \"#fff\",\n  textDecoration: \"none\"\n};\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nexport class AddTodo extends Component {\n  state = {\n    title: \"\"\n  };\n\n  onSubmit = e => {\n    e.preventDefault();\n    this.props.addTodo(this.state.title);\n    this.setState({ title: \"\" });\n  };\n  onChange = e => this.setState({ [e.target.name]: e.target.value });\n  render() {\n    return (\n      <form style={{ display: \"flex\" }} onSubmit={this.onSubmit}>\n        <input\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"Add Todo ...\"\n          value={this.state.title}\n          onChange={this.onChange}\n          style={{ flex: \"10\", padding: \"5px\" }}\n        />\n        <input\n          type=\"submit\"\n          value=\"Submit\"\n          className=\"btn\"\n          style={{ flex: \"1\" }}\n        />\n      </form>\n    );\n  }\n}\n\n// PropTypes\nAddTodo.propTypes = {\n  addTodo: PropTypes.func.isRequired\n};\n\nexport default AddTodo;\n","import React from \"react\";\n\nexport default function About() {\n  return (\n    <React.Fragment>\n      <h1>About</h1>\n      <p>This is Todolist app v1.0.0 It is part of React Module.</p>\n    </React.Fragment>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Todos from \"./components/Todos\";\nimport Header from \"./components/layout/Header\";\nimport AddTodo from \"./components/AddTodo\";\nimport About from \"./components/pages/About\";\nimport uuid from \"uuid\";\nimport axios from \"axios\";\n\n//use rce to create a component automatically\n\nclass App extends React.Component {\n  state = {\n    todos: []\n  };\n\n  componentDidMount() {\n    axios\n      .get(\"https://jsonplaceholder.typicode.com/todos?_limit=5\")\n      .then(res => this.setState({ todos: res.data }));\n  }\n  markComplete = id => {\n    this.setState({\n      todos: this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      })\n    });\n  };\n\n  //delTodo\n  delTodo = id => {\n    axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`).then(res =>\n      this.setState({\n        todos: [...this.state.todos.filter(todo => todo.id !== id)]\n      })\n    );\n  };\n\n  //Add Todo\n  addTodo = title => {\n    const newTodo = {\n      id: uuid.v4(),\n      title: title,\n      completed: false\n    };\n    this.setState({ todos: [...this.state.todos, newTodo] });\n  };\n\n  render() {\n    //console.log(this.state.todos);\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route\n              path=\"/\"\n              exact\n              render={props => (\n                <React.Fragment>\n                  <AddTodo addTodo={this.addTodo} />\n                  <Todos\n                    todos={this.state.todos}\n                    markComplete={this.markComplete}\n                    delTodo={this.delTodo}\n                  />\n                </React.Fragment>\n              )}\n            />\n            <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}